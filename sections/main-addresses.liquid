<div class="addresses-section">
    <div class="container">
        <div class="heading-section text-center my-5">
            <h2>Edit Address</h2>
        </div>
        <div class="row">
            {% for address in customer.addresses %}
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">
                         <div class="d-flex">
                            <div class="col">
                                <a href="">Delete</a>
                            </div>
                            <div class="col text-end">
                                <a href="#editModal{{ forloop.index }}" data-bs-toggle="modal">Edit</a>
                            </div>
                         </div>   
                        </div>
                        <div class="card-body">
                            {{ address | format_address }}
                        </div>
                    </div>

                    <!-- Bootstrap Modal Start -->
                    <div class="modal fade" id="editModal{{ forloop.index }}" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered" role="document">
                            <div class="modal-content">
                                <div class="modal-header d-flex justify-content-between align-items-center">
                                    <h5 class="modal-title" id="exampleModalCenterTitle">Edit Address</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    {% form 'customer_address', address %}
                                        <div class="form-group">
                                            <div class="row">
                                                <div class="col">
                                                    <input type="text" class="form-control" name="address[first_name]" value="{{ form.first_name }}" placeholder="First Name">
                                                </div>
                                                <div class="col">
                                                    <input type="text" class="form-control" name="address[last_name]" value="{{ form.last_name }}" placeholder="Last Name">
                                                </div>
                                            </div>
                                        </div>

                                        <div class="form-group mb-2">
                                            <input type="text" name="address[company]" value="{{ form.company }}" class="form-control" placeholder="Company Name">
                                        </div>
                                        <div class="form-group mb-2">
                                            <input type="text" name="address[address1]" value="{{ form.address1 }}" class="form-control" placeholder="Address 1">
                                        </div>
                                        <div class="form-group mb-2">
                                            <input type="text" name="address[address2]" value="{{ form.address2 }}" class="form-control" placeholder="Address 2">
                                        </div>
                                        <div class="form-group mb-2">
                                            <input type="text" name="address[city]" value="{{ form.city }}" class="form-control" placeholder="City">
                                        </div>
                                        <div class="form-group mb-2">
                                            <div class="row">
                                                <div class="col">
                                                    <div class="select-country">
                                                        <label>Select Country</label>
                                                        <select name="address[country]" class="form-control" data-default="{{form.country}}">{{ all_country_option_tags }}</select>
                                                    </div>
                                                </div>
                                                <div class="col">
                                                    <div class="select-province" style="display: none;">
                                                        <label>Select Province</label>
                                                        <select name="address[province]" class="form-control" data-default="{{form.province}}"></select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group mb-2">
                                            <input type="text" name="address[zip]" value="{{ form.zip }}" class="form-control mb-2" placeholder="Zip Code">
                                        </div>
                                        <div class="form-group mb-2">
                                            <input type="text" name="address[phone]" value="{{ form.phone }}" class="form-control mb-2" placeholder="Phone No">
                                        </div>
                                        <div class="form-group mb-2">
                                            {{ form.set_as_default_checkbox }}
                                            <label for="address_default_address_{{form.id}}">Set all as default address</label>
                                        </div>
                                        <div class="action my-3 d-flex justify-content-end">
                                            <button type="submit" class="btn btn-success mx-2">Update</button>
                                            <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                                        </div>
                                    {% endform %}
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Modal End -->
                </div>
            {% endfor %}
        </div>
    </div>
</div>


<script>
<!-- Jquery Start -->
$(document).ready(function () {
    // Function to populate provinces dropdown
    function populateProvinces($countrySelect, provinces, selectedProvince) {
        var $provincesSelect = $countrySelect.closest('.col').next('.col').find('.select-province');
        var $provincesSelector = $provincesSelect.find('select');
        $provincesSelector.empty();

        if (provinces && provinces.length > 0) {
            $.each(provinces, function (index, province) {
                $provincesSelector.append($('<option>', {
                    value: province[0],
                    text: province[1]
                }));
            });

            // Set the selected province
            if (selectedProvince) {
                $provincesSelector.find('option').each(function () {
                    if ($(this).val() === selectedProvince) {
                        $(this).prop('selected', true);
                        return false; // Stop the loop once the selected option is found
                    }
                });
            }

            $provincesSelect.show();
        } else {
            $provincesSelect.hide();
        }
    }

    // Initial setup
    $('.select-country select').each(function () {
        var selectedCountry = $(this).data('default');
        $(this).find('option').each(function () {
            if ($(this).val() === selectedCountry) {
                $(this).prop('selected', true);
                return false;
            }
        });

        var provinces = $(this).find('option:selected').data('provinces');
        var selectedProvince = $(this).closest('.col').next('.col').find('.select-province select').data('default');
        
        // If provinces is a JSON string, parse it
        if (typeof provinces === 'string') {
            provinces = JSON.parse(provinces);
        }

        populateProvinces($(this), provinces, selectedProvince);
    });

    // Event handler for changing the country
    $('.select-country select').change(function () {
        var provinces = $(this).find('option:selected').data('provinces');
        
        // If provinces is a JSON string, parse it
        if (typeof provinces === 'string') {
            provinces = JSON.parse(provinces);
        }

        populateProvinces($(this), provinces, null);
    });
});



<!-- Jquery End -->

<!-- Javascript Start -->

  /*
document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.select-country select').forEach(function (countrySelect) {
        var selectedCountry = countrySelect.getAttribute('data-default');

        // Select the country option based on the data-default attribute
        Array.from(countrySelect.options).forEach(function (option) {
            if (option.value === selectedCountry) {
                option.selected = true;
            }
        });

        // Fetch provinces from the selected country option's data attribute
        var provinces = countrySelect.selectedOptions[0].getAttribute('data-provinces');

        if (provinces) {
            provinces = JSON.parse(provinces);  // Parse provinces data if it's a JSON string

            if (provinces.length > 0) {
                var provinceContainer = countrySelect.closest('.col').nextElementSibling.querySelector('.select-province');
                var provinceSelect = provinceContainer.querySelector('select');
                var selectedProvince = provinceSelect.getAttribute('data-default');

                // Clear existing options in the province dropdown
                provinceSelect.innerHTML = '';

                // Populate the province dropdown
                provinces.forEach(function (province) {
                    var option = document.createElement('option');
                    option.value = province[0];
                    option.textContent = province[1];
                    provinceSelect.appendChild(option);
                });

                // Set the selected province if it exists
                Array.from(provinceSelect.options).forEach(function (option) {
                    if (option.value === selectedProvince) {
                        option.selected = true;
                    }
                });

                // Show the province selector
                provinceContainer.style.display = 'block';
            }
        }
    });



    // Event listener for country selection changes
    document.querySelectorAll('.select-country select').forEach(function (countrySelect) {
        countrySelect.addEventListener('change', function () {
            var provinceContainer = this.closest('.col').nextElementSibling.querySelector('.select-province');
            var provinceSelect = provinceContainer.querySelector('select');
            
            // Clear existing options
            provinceSelect.innerHTML = '';

            // Fetch new provinces data
            var provinces = this.selectedOptions[0].getAttribute('data-provinces');
            if (provinces) {
                provinces = JSON.parse(provinces);
                if (provinces.length > 0) {
                    // Populate the province dropdown
                    provinces.forEach(function (province) {
                        var option = document.createElement('option');
                        option.value = province[0];
                        option.textContent = province[1];
                        provinceSelect.appendChild(option);
                    });

                    // Show the province selector
                    provinceContainer.style.display = 'block';
                } else {
                    // Hide the province selector if there are no provinces
                    provinceContainer.style.display = 'none';
                }
            } else {
                // Hide the province selector if no provinces data is available
                provinceContainer.style.display = 'none';
            }
        });
    });
});
*/

<!-- Javascript End -->

</script>



